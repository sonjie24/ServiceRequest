// <auto-generated />
using System;
using AccountManagement.Framework.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

namespace AccountManagement.Framework.Data.Migrations
{
    [DbContext(typeof(AccountDbContext))]
    [Migration("20220309133413_adddeviceId")]
    partial class adddeviceId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AccountManagement.FrameWork.Models.AdminRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("AdminRoles");
                });

            modelBuilder.Entity("AccountManagement.FrameWork.Models.AdminRouteModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Global")
                        .HasColumnType("bit");

                    b.Property<string>("Grouping")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Module")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdminRouteModels");
                });

            modelBuilder.Entity("AccountManagement.FrameWork.Models.AdminRouteModelRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouteModelId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdminRouteModelRoles");
                });

            modelBuilder.Entity("AccountManagement.FrameWork.Models.AdminUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdminUserRoles");
                });

            modelBuilder.Entity("AccountManagement.FrameWork.Models.ConsumerFavorites", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ConsumerAccountEntityId")
                        .HasColumnType("int");

                    b.Property<string>("ConsumerGuid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantGuid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConsumerAccountEntityId");

                    b.ToTable("ConsumerFavorites");
                });

            modelBuilder.Entity("AccountManagement.FrameWork.Models.MerchantOpeningHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Day")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MerchantOpeningHours");
                });

            modelBuilder.Entity("AccountManagement.FrameWork.Models.MerchantRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MerchantRequirements");
                });

            modelBuilder.Entity("AccountManagement.FrameWork.Models.MerchantUserTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrint")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSave")
                        .HasColumnType("bit");

                    b.Property<bool>("IsView")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MerchantUserTypeEntities");

                    b.HasDiscriminator<string>("Discriminator").HasValue("MerchantUserTypeEntity");
                });

            modelBuilder.Entity("AccountManagement.FrameWork.Models.Models.Accounts.Admin.AdminEmployeeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EffectivityDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("WithEffectivity")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("AdminEStaffs");
                });

            modelBuilder.Entity("AccountManagement.FrameWork.Models.RiderRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiderId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RiderRequirements");
                });

            modelBuilder.Entity("AccountManagement.FrameWork.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GUID = "781eb8d7-ad96-49b2-bd44-8697331e65d9",
                            RoleName = "Admin",
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            GUID = "d501dcf6-1c8f-45ab-a823-0049d07f538b",
                            RoleName = "User",
                            Status = true
                        });
                });

            modelBuilder.Entity("AccountManagement.FrameWork.Models.RouteModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Global")
                        .HasColumnType("bit");

                    b.Property<string>("Grouping")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Module")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RouteModels");
                });

            modelBuilder.Entity("AccountManagement.FrameWork.Models.RouteModelRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouteModelId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RouteModelRoles");
                });

            modelBuilder.Entity("AccountManagement.FrameWork.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.AdminAccountEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeliveryStatus")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsAccountConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("JobPosition")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("SetEffectivity")
                        .HasColumnType("bit");

                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Account_Admin");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 741, DateTimeKind.Unspecified).AddTicks(1080),
                            DeliveryStatus = 0,
                            EmailAddress = "admin1@gmail.com",
                            GUID = "7c235e71-10c0-4425-9d4e-b52608091a19",
                            IsAccountConfirmed = true,
                            MobileNumber = "639198286400",
                            Password = "G30l0g!cH@$H2048$Iv2+u0Fn70iLUsSb33lJJfUNWgnYu1wYKiTwFRKLS36YBQzrJ1GYnQOa",
                            SetEffectivity = false,
                            Status = 1,
                            Username = "admin1@gmail.com",
                            ValidUntil = new DateTime(2022, 3, 9, 13, 34, 12, 741, DateTimeKind.Utc).AddTicks(2580)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 741, DateTimeKind.Unspecified).AddTicks(5270),
                            DeliveryStatus = 0,
                            EmailAddress = "admin2@gmail.com",
                            GUID = "c47ea340-2b60-464a-8ade-f2b4f0049000",
                            IsAccountConfirmed = true,
                            MobileNumber = "639198286401",
                            Password = "G30l0g!cH@$H2048$Iv2+u0Fn70iLUsSb33lJJfUNWgnYu1wYKiTwFRKLS36YBQzrJ1GYnQOa",
                            SetEffectivity = false,
                            Status = 1,
                            Username = "admin2@gmail.com",
                            ValidUntil = new DateTime(2022, 3, 9, 13, 34, 12, 741, DateTimeKind.Utc).AddTicks(5310)
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 741, DateTimeKind.Unspecified).AddTicks(5390),
                            DeliveryStatus = 0,
                            EmailAddress = "admin3@gmail.com",
                            GUID = "4ee98072-715c-4fc8-9f60-672672101869",
                            IsAccountConfirmed = true,
                            MobileNumber = "639198286402",
                            Password = "G30l0g!cH@$H2048$Iv2+u0Fn70iLUsSb33lJJfUNWgnYu1wYKiTwFRKLS36YBQzrJ1GYnQOa",
                            SetEffectivity = false,
                            Status = 2,
                            Username = "admin3@gmail.com",
                            ValidUntil = new DateTime(2022, 3, 9, 13, 34, 12, 741, DateTimeKind.Utc).AddTicks(5400)
                        });
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.AppOsMonitoring", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppOsMonitorings");
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.AppVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppVersions");
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("StoreCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Fast Food",
                            GUID = "f7db2f73-242a-4484-8c29-447e689626ac",
                            ImagePath = "https://res.cloudinary.com/reddstar-transportation-solution-corp/image/upload/v1637289991/passafood/merchant_categories/tixso8yavpwry41og13k.png"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Fine Dining",
                            GUID = "acd72e89-89a7-4ee7-98d9-cbdcf7e1b2b1",
                            ImagePath = "https://res.cloudinary.com/reddstar-transportation-solution-corp/image/upload/v1637289992/passafood/merchant_categories/xjeqrxdfo2psbtj9qwgo.png"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Fast Casual",
                            GUID = "3b5be802-a1f0-495c-86a0-01c383a96d4f",
                            ImagePath = "https://res.cloudinary.com/reddstar-transportation-solution-corp/image/upload/v1637289992/passafood/merchant_categories/m0gyjtumgswn2ljs4k9p.png"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Buffet",
                            GUID = "0a17b01d-25e9-474c-94f7-22ba076a4ab1",
                            ImagePath = "https://res.cloudinary.com/reddstar-transportation-solution-corp/image/upload/v1637289993/passafood/merchant_categories/gd8sjby9egzrdh5umx09.png"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Prepare It Yourself",
                            GUID = "5a26b184-5afa-4588-8b3e-f0a9d4d9b5c1",
                            ImagePath = "https://res.cloudinary.com/reddstar-transportation-solution-corp/image/upload/v1637289991/passafood/merchant_categories/o5xytte0r4jqs9sznpbo.png"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Family Style",
                            GUID = "af8a41a8-39f3-480d-95c2-4a131c78339f",
                            ImagePath = "https://res.cloudinary.com/reddstar-transportation-solution-corp/image/upload/v1637289992/passafood/merchant_categories/tdsqbyyfwxztw7xrdcpi.png"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Pop Up",
                            GUID = "39ebc4b3-bce2-4eb2-9b93-93a90a9be427",
                            ImagePath = "https://res.cloudinary.com/reddstar-transportation-solution-corp/image/upload/v1637289991/passafood/merchant_categories/d6lkyr0rpxpgkw6fp9vv.png"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Food Truck",
                            GUID = "9d530e0d-9281-4c15-b2bb-15a78da1966f",
                            ImagePath = "https://res.cloudinary.com/reddstar-transportation-solution-corp/image/upload/v1637289992/passafood/merchant_categories/m0gyjtumgswn2ljs4k9p.png"
                        });
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.ConsumerAccountEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsAccountConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSocial")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderCount")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("RatingCount")
                        .HasColumnType("int");

                    b.Property<string>("SocialId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Account_Consumer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 755, DateTimeKind.Unspecified).AddTicks(6310),
                            EmailAddress = "Consumer1@gmail.com",
                            GUID = "7560b347-9644-49be-8326-92a0e30dbdb9",
                            IsAccountConfirmed = false,
                            IsSocial = false,
                            MobileNumber = "639198286700",
                            OrderCount = 0,
                            Rating = 0.0,
                            RatingCount = 0,
                            SocialId = "",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 755, DateTimeKind.Unspecified).AddTicks(9100),
                            EmailAddress = "Consumer2@gmail.com",
                            GUID = "d6f05409-8c15-4490-995f-af7938bbe670",
                            IsAccountConfirmed = false,
                            IsSocial = false,
                            MobileNumber = "639198286701",
                            OrderCount = 0,
                            Rating = 0.0,
                            RatingCount = 0,
                            SocialId = "",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 755, DateTimeKind.Unspecified).AddTicks(9180),
                            EmailAddress = "Consumer3@gmail.com",
                            GUID = "d51c7f00-f721-4314-a8af-70b8b57f7723",
                            IsAccountConfirmed = false,
                            IsSocial = false,
                            MobileNumber = "639198286702",
                            OrderCount = 0,
                            Rating = 0.0,
                            RatingCount = 0,
                            SocialId = "",
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 755, DateTimeKind.Unspecified).AddTicks(9200),
                            EmailAddress = "Consumer4@gmail.com",
                            GUID = "a2985585-a9a9-49d1-94fa-68ca08a78036",
                            IsAccountConfirmed = false,
                            IsSocial = false,
                            MobileNumber = "639198286703",
                            OrderCount = 0,
                            Rating = 0.0,
                            RatingCount = 0,
                            SocialId = "",
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 755, DateTimeKind.Unspecified).AddTicks(9210),
                            EmailAddress = "Consumer5@gmail.com",
                            GUID = "e464beb5-94eb-4aa6-9bcf-267afc70cd3d",
                            IsAccountConfirmed = false,
                            IsSocial = false,
                            MobileNumber = "639198286704",
                            OrderCount = 0,
                            Rating = 0.0,
                            RatingCount = 0,
                            SocialId = "",
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 755, DateTimeKind.Unspecified).AddTicks(9220),
                            EmailAddress = "Consumer6@gmail.com",
                            GUID = "ff2bbd63-caf8-4822-b831-57fca4be32b3",
                            IsAccountConfirmed = false,
                            IsSocial = false,
                            MobileNumber = "639198286705",
                            OrderCount = 0,
                            Rating = 0.0,
                            RatingCount = 0,
                            SocialId = "",
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 755, DateTimeKind.Unspecified).AddTicks(9230),
                            EmailAddress = "Consumer7@gmail.com",
                            GUID = "e98ad9f6-182e-4d02-be97-7c751a61cf91",
                            IsAccountConfirmed = false,
                            IsSocial = false,
                            MobileNumber = "639198286706",
                            OrderCount = 0,
                            Rating = 0.0,
                            RatingCount = 0,
                            SocialId = "",
                            Status = 1
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 755, DateTimeKind.Unspecified).AddTicks(9240),
                            EmailAddress = "Consumer8@gmail.com",
                            GUID = "8380df7b-3401-4567-ba19-55f5efccfe91",
                            IsAccountConfirmed = false,
                            IsSocial = false,
                            MobileNumber = "639198286707",
                            OrderCount = 0,
                            Rating = 0.0,
                            RatingCount = 0,
                            SocialId = "",
                            Status = 1
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 755, DateTimeKind.Unspecified).AddTicks(9250),
                            EmailAddress = "Consumer9@gmail.com",
                            GUID = "2fac0a49-5949-414e-ac55-0100eae6ed65",
                            IsAccountConfirmed = false,
                            IsSocial = false,
                            MobileNumber = "639198286708",
                            OrderCount = 0,
                            Rating = 0.0,
                            RatingCount = 0,
                            SocialId = "",
                            Status = 1
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 755, DateTimeKind.Unspecified).AddTicks(9250),
                            EmailAddress = "Consumer10@gmail.com",
                            GUID = "67f77d1d-6bcd-41f9-ac0d-1a3d03e208c7",
                            IsAccountConfirmed = false,
                            IsSocial = false,
                            MobileNumber = "639198286709",
                            OrderCount = 0,
                            Rating = 0.0,
                            RatingCount = 0,
                            SocialId = "",
                            Status = 1
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 755, DateTimeKind.Unspecified).AddTicks(9260),
                            EmailAddress = "Consumer11@gmail.com",
                            GUID = "3dfd05ff-235f-4058-9699-968fa354d4cc",
                            IsAccountConfirmed = false,
                            IsSocial = false,
                            MobileNumber = "639198286710",
                            OrderCount = 0,
                            Rating = 0.0,
                            RatingCount = 0,
                            SocialId = "",
                            Status = 1
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 755, DateTimeKind.Unspecified).AddTicks(9270),
                            EmailAddress = "Consumer12@gmail.com",
                            GUID = "fe3d2077-ff1a-4c51-9199-c115b3357935",
                            IsAccountConfirmed = false,
                            IsSocial = false,
                            MobileNumber = "639198286711",
                            OrderCount = 0,
                            Rating = 0.0,
                            RatingCount = 0,
                            SocialId = "",
                            Status = 1
                        },
                        new
                        {
                            Id = 13,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 755, DateTimeKind.Unspecified).AddTicks(9280),
                            EmailAddress = "Consumer13@gmail.com",
                            GUID = "646f788f-262a-4be1-9158-a69f67e3db97",
                            IsAccountConfirmed = false,
                            IsSocial = false,
                            MobileNumber = "639198286712",
                            OrderCount = 0,
                            Rating = 0.0,
                            RatingCount = 0,
                            SocialId = "",
                            Status = 1
                        },
                        new
                        {
                            Id = 14,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 755, DateTimeKind.Unspecified).AddTicks(9290),
                            EmailAddress = "Consumer14@gmail.com",
                            GUID = "e6f3fee9-8ffb-4d05-a66a-6866041a92cf",
                            IsAccountConfirmed = false,
                            IsSocial = false,
                            MobileNumber = "639198286713",
                            OrderCount = 0,
                            Rating = 0.0,
                            RatingCount = 0,
                            SocialId = "",
                            Status = 1
                        });
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.ConsumerAddressBookEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConsumerId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<Point>("Location")
                        .HasColumnType("geography");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiderInstruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<bool>("isDefault")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ConsumerId");

                    b.ToTable("CustomerAddressBook");
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.MerchantAccountEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool?>("IsAccountConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSocial")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId");

                    b.ToTable("Account_Merchants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 749, DateTimeKind.Unspecified).AddTicks(8080),
                            EmailAddress = "MerchantUser1@gmail.com",
                            FirstName = "MerchantUser  1",
                            GUID = "ecfbcaf4-bf61-4f73-a37a-09b633340fd3",
                            IsAccountConfirmed = true,
                            IsSocial = false,
                            MerchantId = 1,
                            MobileNumber = "639198286601",
                            Password = "G30l0g!cH@$H2048$Iv2+u0Fn70iLUsSb33lJJfUNWgnYu1wYKiTwFRKLS36YBQzrJ1GYnQOa",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 749, DateTimeKind.Unspecified).AddTicks(9900),
                            EmailAddress = "MerchantUser21@gmail.com",
                            FirstName = "MerchantUser  2",
                            GUID = "b6a8ead5-b951-40c3-b712-0d7e00c2203a",
                            IsAccountConfirmed = true,
                            IsSocial = false,
                            MerchantId = 2,
                            MobileNumber = "639198286602",
                            Password = "G30l0g!cH@$H2048$Iv2+u0Fn70iLUsSb33lJJfUNWgnYu1wYKiTwFRKLS36YBQzrJ1GYnQOa",
                            Status = 2
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 749, DateTimeKind.Unspecified).AddTicks(9960),
                            EmailAddress = "MerchantUser3@gmail.com",
                            FirstName = "MerchantUser  3",
                            GUID = "588ddb19-f845-431e-b653-c87748e6df3e",
                            IsAccountConfirmed = true,
                            IsSocial = false,
                            MerchantId = 3,
                            MobileNumber = "639198286603",
                            Password = "G30l0g!cH@$H2048$Iv2+u0Fn70iLUsSb33lJJfUNWgnYu1wYKiTwFRKLS36YBQzrJ1GYnQOa",
                            Status = 3
                        });
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.MerchantCategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MerchantStoreId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MerchantStoreId");

                    b.ToTable("MerchantCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            GUID = "d1357888-c038-4e9b-a906-ed1d3d2fe936",
                            MerchantStoreId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            GUID = "abb36b62-f84d-4600-aef7-a4cb26b4de67",
                            MerchantStoreId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            GUID = "fa08f56d-e120-4660-8bf8-fb1847721b21",
                            MerchantStoreId = 3,
                            Status = 1
                        });
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.MerchantStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EffectivityDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SetEffectivity")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("MerchantStaffs");
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.MerchantStoreEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("AutoAccept")
                        .HasColumnType("bit");

                    b.Property<string>("Barangay")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("BranchGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityMunicipality")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<double>("ConsumerRating")
                        .HasColumnType("float");

                    b.Property<int>("ConsumerRatingCount")
                        .HasColumnType("int");

                    b.Property<string>("ContactFirstName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ContactLastName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ContactNo")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDocsComplied")
                        .HasColumnType("bit");

                    b.Property<string>("LandMark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<Point>("Location")
                        .HasColumnType("geography");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<double>("MerchantKmRange")
                        .HasColumnType("float");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfEmployees")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("ParentMerchantStoreEntityId")
                        .HasColumnType("int");

                    b.Property<bool>("Prepaid")
                        .HasColumnType("bit");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<double>("RiderKmRange")
                        .HasColumnType("float");

                    b.Property<double>("RiderRating")
                        .HasColumnType("float");

                    b.Property<int>("RiderRatingCount")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Merchants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AutoAccept = true,
                            BranchGroup = "eac3128d-e4fc-4bd2-b64f-b651d2616d19",
                            Company = "Merchant Company  1",
                            ConsumerRating = 0.0,
                            ConsumerRatingCount = 0,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 746, DateTimeKind.Unspecified).AddTicks(7970),
                            Email = "MerchantStore1@gmail.com",
                            GUID = "ae36fbd3-a345-4f41-84a0-e6f65741d62e",
                            ImagePath = "https://res.cloudinary.com/reddstar-transportation-solution-corp/image/upload/v1635517246/passafood/eog3og3lgvrsxd5ooaiy.png",
                            IsDocsComplied = false,
                            Latitude = 10.253758260084641,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (123.81194936066956 10.253758260084641)"),
                            Longitude = 123.81194936066956,
                            MerchantKmRange = 2000.0,
                            NoOfEmployees = 0,
                            ParentMerchantStoreEntityId = 0,
                            Prepaid = false,
                            RiderKmRange = 500.0,
                            RiderRating = 0.0,
                            RiderRatingCount = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            AutoAccept = true,
                            BranchGroup = "084aa67f-b9a7-4841-8224-0ca951f2e4f0",
                            Company = "Merchant Company  2",
                            ConsumerRating = 0.0,
                            ConsumerRatingCount = 0,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 749, DateTimeKind.Unspecified).AddTicks(7120),
                            Email = "MerchantStore2@gmail.com",
                            GUID = "6b8f70ed-11e8-4a12-9e82-1f4a6429c957",
                            ImagePath = "https://res.cloudinary.com/reddstar-transportation-solution-corp/image/upload/v1635517246/passafood/eog3og3lgvrsxd5ooaiy.png",
                            IsDocsComplied = false,
                            Latitude = 10.253758260084641,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (123.81194936066957 10.253758260084641)"),
                            Longitude = 123.81194936066957,
                            MerchantKmRange = 2000.0,
                            NoOfEmployees = 0,
                            ParentMerchantStoreEntityId = 0,
                            Prepaid = false,
                            RiderKmRange = 500.0,
                            RiderRating = 0.0,
                            RiderRatingCount = 0,
                            Status = 2
                        },
                        new
                        {
                            Id = 3,
                            AutoAccept = true,
                            BranchGroup = "e80b7ad4-8a3e-469d-960d-90c1553bb44c",
                            Company = "Merchant Company  3",
                            ConsumerRating = 0.0,
                            ConsumerRatingCount = 0,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 749, DateTimeKind.Unspecified).AddTicks(7320),
                            Email = "MerchantStore3@gmail.com",
                            GUID = "7e48434c-7c9b-4d6c-9aeb-a99300ba8d78",
                            ImagePath = "https://res.cloudinary.com/reddstar-transportation-solution-corp/image/upload/v1635517246/passafood/eog3og3lgvrsxd5ooaiy.png",
                            IsDocsComplied = false,
                            Latitude = 10.253758260084643,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (123.81194936066959 10.253758260084643)"),
                            Longitude = 123.81194936066959,
                            MerchantKmRange = 2000.0,
                            NoOfEmployees = 0,
                            ParentMerchantStoreEntityId = 0,
                            Prepaid = false,
                            RiderKmRange = 500.0,
                            RiderRating = 0.0,
                            RiderRatingCount = 0,
                            Status = 3
                        });
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.PasswordAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PasswordAdmins");
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.PasswordMerchant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PasswordMerchants");
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.PasswordRider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PasswordRiders");
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.PersonProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutMe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Barangay")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CityMunicipality")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CivilStatus")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Make")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PlaceBirth")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PlateNo")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("RiderId")
                        .HasColumnType("int");

                    b.Property<string>("Suffix")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("TelNo")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("TransportType")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("yearModel")
                        .HasColumnType("nvarchar(4)")
                        .HasMaxLength(4);

                    b.HasKey("Id");

                    b.HasIndex("RiderId")
                        .IsUnique()
                        .HasFilter("[RiderId] IS NOT NULL");

                    b.ToTable("PersonProfile");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 753, DateTimeKind.Unspecified).AddTicks(970),
                            GUID = "3e66b4bd-0c96-4124-934d-1850739de564"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 753, DateTimeKind.Unspecified).AddTicks(1820),
                            GUID = "1336dd01-22b4-4976-8f94-03b003cea94d"
                        });
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.PersonWorkExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CompanyLocation")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobDescription")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MonthYearFrom")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("MonthYearTo")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Salary")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("profileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("profileId");

                    b.ToTable("PersonWorkExperience");
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.RefreshTokenAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expirydate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<string>("userGuid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokenAdmins");
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.RefreshTokenConsumer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expirydate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<string>("userGuid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokenConsumers");
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.RefreshTokenMerchant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expirydate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<string>("userGuid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokenMerchants");
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.RefreshTokenRider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expirydate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<string>("userGuid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokenRiders");
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.RiderAccountEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DefaultWalletId")
                        .HasColumnType("int");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeliveryStatus")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsAccountConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<decimal>("LimitAmount")
                        .HasColumnType("decimal(26,6)");

                    b.Property<Point>("Location")
                        .HasColumnType("geography");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("RatingCount")
                        .HasColumnType("int");

                    b.Property<int>("RiderOnlineOffline")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCredits")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalEarnings")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("TotalHours")
                        .HasColumnType("float");

                    b.Property<double>("TotalKms")
                        .HasColumnType("float");

                    b.Property<string>("TotalTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TripsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DefaultWalletId");

                    b.ToTable("Account_Riders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 753, DateTimeKind.Unspecified).AddTicks(5850),
                            DeliveryStatus = 0,
                            EmailAddress = "rider1@gmail.com",
                            FirstName = "rider 1",
                            GUID = "71A8C0EC-2007-4E1A-A666-2D9AE917AFBF1",
                            IsAccountConfirmed = true,
                            Latitude = 10.319055000000001,
                            LimitAmount = 0m,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (123.927663 10.319055)"),
                            Longitude = 123.927663,
                            MobileNumber = "639198286601",
                            Password = "G30l0g!cH@$H2048$Iv2+u0Fn70iLUsSb33lJJfUNWgnYu1wYKiTwFRKLS36YBQzrJ1GYnQOa",
                            Rating = 0.0,
                            RatingCount = 0,
                            RiderOnlineOffline = 0,
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TotalCredits = 0m,
                            TotalEarnings = 0m,
                            TotalHours = 0.0,
                            TotalKms = 0.0,
                            TripsCount = 0
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 754, DateTimeKind.Unspecified).AddTicks(670),
                            DeliveryStatus = 0,
                            EmailAddress = "rider2@gmail.com",
                            FirstName = "rider 2",
                            GUID = "71A8C0EC-2007-4E1A-A666-2D9AE917AFBF2",
                            IsAccountConfirmed = true,
                            Latitude = 10.31744,
                            LimitAmount = 0m,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (123.922918 10.31744)"),
                            Longitude = 123.922918,
                            MobileNumber = "639198286602",
                            Password = "G30l0g!cH@$H2048$Iv2+u0Fn70iLUsSb33lJJfUNWgnYu1wYKiTwFRKLS36YBQzrJ1GYnQOa",
                            Rating = 0.0,
                            RatingCount = 0,
                            RiderOnlineOffline = 0,
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TotalCredits = 0m,
                            TotalEarnings = 0m,
                            TotalHours = 0.0,
                            TotalKms = 0.0,
                            TripsCount = 0
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 754, DateTimeKind.Unspecified).AddTicks(770),
                            DeliveryStatus = 0,
                            EmailAddress = "rider3@gmail.com",
                            FirstName = "rider 3",
                            GUID = "71A8C0EC-2007-4E1A-A666-2D9AE917AFBF3",
                            IsAccountConfirmed = true,
                            Latitude = 10.316795000000001,
                            LimitAmount = 0m,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (123.919382 10.316795)"),
                            Longitude = 123.919382,
                            MobileNumber = "639198286603",
                            Password = "G30l0g!cH@$H2048$Iv2+u0Fn70iLUsSb33lJJfUNWgnYu1wYKiTwFRKLS36YBQzrJ1GYnQOa",
                            Rating = 0.0,
                            RatingCount = 0,
                            RiderOnlineOffline = 0,
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TotalCredits = 0m,
                            TotalEarnings = 0m,
                            TotalHours = 0.0,
                            TotalKms = 0.0,
                            TripsCount = 0
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 754, DateTimeKind.Unspecified).AddTicks(890),
                            DeliveryStatus = 0,
                            EmailAddress = "rider4@gmail.com",
                            FirstName = "rider 4",
                            GUID = "71A8C0EC-2007-4E1A-A666-2D9AE917AFBF4",
                            IsAccountConfirmed = true,
                            Latitude = 10.321177,
                            LimitAmount = 0m,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (123.918676 10.321177)"),
                            Longitude = 123.918676,
                            MobileNumber = "639198286604",
                            Password = "G30l0g!cH@$H2048$Iv2+u0Fn70iLUsSb33lJJfUNWgnYu1wYKiTwFRKLS36YBQzrJ1GYnQOa",
                            Rating = 0.0,
                            RatingCount = 0,
                            RiderOnlineOffline = 0,
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TotalCredits = 0m,
                            TotalEarnings = 0m,
                            TotalHours = 0.0,
                            TotalKms = 0.0,
                            TripsCount = 0
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 754, DateTimeKind.Unspecified).AddTicks(910),
                            DeliveryStatus = 0,
                            EmailAddress = "rider5@gmail.com",
                            FirstName = "rider 5",
                            GUID = "71A8C0EC-2007-4E1A-A666-2D9AE917AFBF5",
                            IsAccountConfirmed = true,
                            Latitude = 10.319350999999999,
                            LimitAmount = 0m,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (123.919407 10.319351)"),
                            Longitude = 123.91940700000001,
                            MobileNumber = "639198286605",
                            Password = "G30l0g!cH@$H2048$Iv2+u0Fn70iLUsSb33lJJfUNWgnYu1wYKiTwFRKLS36YBQzrJ1GYnQOa",
                            Rating = 0.0,
                            RatingCount = 0,
                            RiderOnlineOffline = 0,
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TotalCredits = 0m,
                            TotalEarnings = 0m,
                            TotalHours = 0.0,
                            TotalKms = 0.0,
                            TripsCount = 0
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 754, DateTimeKind.Unspecified).AddTicks(930),
                            DeliveryStatus = 0,
                            EmailAddress = "rider6@gmail.com",
                            FirstName = "rider 6",
                            GUID = "71A8C0EC-2007-4E1A-A666-2D9AE917AFBF6",
                            IsAccountConfirmed = true,
                            Latitude = 10.323675,
                            LimitAmount = 0m,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (23.922006 10.323675)"),
                            Longitude = 23.922006,
                            MobileNumber = "639198286606",
                            Password = "G30l0g!cH@$H2048$Iv2+u0Fn70iLUsSb33lJJfUNWgnYu1wYKiTwFRKLS36YBQzrJ1GYnQOa",
                            Rating = 0.0,
                            RatingCount = 0,
                            RiderOnlineOffline = 0,
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TotalCredits = 0m,
                            TotalEarnings = 0m,
                            TotalHours = 0.0,
                            TotalKms = 0.0,
                            TripsCount = 0
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 754, DateTimeKind.Unspecified).AddTicks(950),
                            DeliveryStatus = 0,
                            EmailAddress = "rider7@gmail.com",
                            FirstName = "rider 7",
                            GUID = "71A8C0EC-2007-4E1A-A666-2D9AE917AFBF7",
                            IsAccountConfirmed = true,
                            Latitude = 10.322524,
                            LimitAmount = 0m,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (123.919163 10.322524)"),
                            Longitude = 123.919163,
                            MobileNumber = "639198286607",
                            Password = "G30l0g!cH@$H2048$Iv2+u0Fn70iLUsSb33lJJfUNWgnYu1wYKiTwFRKLS36YBQzrJ1GYnQOa",
                            Rating = 0.0,
                            RatingCount = 0,
                            RiderOnlineOffline = 0,
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TotalCredits = 0m,
                            TotalEarnings = 0m,
                            TotalHours = 0.0,
                            TotalKms = 0.0,
                            TripsCount = 0
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 754, DateTimeKind.Unspecified).AddTicks(960),
                            DeliveryStatus = 0,
                            EmailAddress = "rider8@gmail.com",
                            FirstName = "rider 8",
                            GUID = "71A8C0EC-2007-4E1A-A666-2D9AE917AFBF8",
                            IsAccountConfirmed = true,
                            Latitude = 10.316311000000001,
                            LimitAmount = 0m,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (123.918791 10.316311)"),
                            Longitude = 123.918791,
                            MobileNumber = "639198286608",
                            Password = "G30l0g!cH@$H2048$Iv2+u0Fn70iLUsSb33lJJfUNWgnYu1wYKiTwFRKLS36YBQzrJ1GYnQOa",
                            Rating = 0.0,
                            RatingCount = 0,
                            RiderOnlineOffline = 0,
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TotalCredits = 0m,
                            TotalEarnings = 0m,
                            TotalHours = 0.0,
                            TotalKms = 0.0,
                            TripsCount = 0
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 754, DateTimeKind.Unspecified).AddTicks(980),
                            DeliveryStatus = 0,
                            EmailAddress = "rider9@gmail.com",
                            FirstName = "rider 9",
                            GUID = "71A8C0EC-2007-4E1A-A666-2D9AE917AFBF9",
                            IsAccountConfirmed = true,
                            Latitude = 10.312856999999999,
                            LimitAmount = 0m,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (123.919796 10.312857)"),
                            Longitude = 123.91979600000001,
                            MobileNumber = "639198286609",
                            Password = "G30l0g!cH@$H2048$Iv2+u0Fn70iLUsSb33lJJfUNWgnYu1wYKiTwFRKLS36YBQzrJ1GYnQOa",
                            Rating = 0.0,
                            RatingCount = 0,
                            RiderOnlineOffline = 0,
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TotalCredits = 0m,
                            TotalEarnings = 0m,
                            TotalHours = 0.0,
                            TotalKms = 0.0,
                            TripsCount = 0
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 754, DateTimeKind.Unspecified).AddTicks(1000),
                            DeliveryStatus = 0,
                            EmailAddress = "rider10@gmail.com",
                            FirstName = "rider 10",
                            GUID = "71A8C0EC-2007-4E1A-A666-2D9AE917AFBF10",
                            IsAccountConfirmed = true,
                            Latitude = 10.313616,
                            LimitAmount = 0m,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (123.919796 10.313616)"),
                            Longitude = 123.91979600000001,
                            MobileNumber = "639198286610",
                            Password = "G30l0g!cH@$H2048$Iv2+u0Fn70iLUsSb33lJJfUNWgnYu1wYKiTwFRKLS36YBQzrJ1GYnQOa",
                            Rating = 0.0,
                            RatingCount = 0,
                            RiderOnlineOffline = 0,
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TotalCredits = 0m,
                            TotalEarnings = 0m,
                            TotalHours = 0.0,
                            TotalKms = 0.0,
                            TripsCount = 0
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 754, DateTimeKind.Unspecified).AddTicks(1020),
                            DeliveryStatus = 0,
                            EmailAddress = "rider11@gmail.com",
                            FirstName = "rider 11",
                            GUID = "71A8C0EC-2007-4E1A-A666-2D9AE917AFBF11",
                            IsAccountConfirmed = true,
                            Latitude = 10.312856999999999,
                            LimitAmount = 0m,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (123.922765 10.312857)"),
                            Longitude = 123.922765,
                            MobileNumber = "639198286611",
                            Password = "G30l0g!cH@$H2048$Iv2+u0Fn70iLUsSb33lJJfUNWgnYu1wYKiTwFRKLS36YBQzrJ1GYnQOa",
                            Rating = 0.0,
                            RatingCount = 0,
                            RiderOnlineOffline = 0,
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TotalCredits = 0m,
                            TotalEarnings = 0m,
                            TotalHours = 0.0,
                            TotalKms = 0.0,
                            TripsCount = 0
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 754, DateTimeKind.Unspecified).AddTicks(1160),
                            DeliveryStatus = 0,
                            EmailAddress = "rider12@gmail.com",
                            FirstName = "rider 12",
                            GUID = "71A8C0EC-2007-4E1A-A666-2D9AE917AFBF12",
                            IsAccountConfirmed = true,
                            Latitude = 10.313533,
                            LimitAmount = 0m,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (123.926971 10.313533)"),
                            Longitude = 123.92697099999999,
                            MobileNumber = "639198286612",
                            Password = "G30l0g!cH@$H2048$Iv2+u0Fn70iLUsSb33lJJfUNWgnYu1wYKiTwFRKLS36YBQzrJ1GYnQOa",
                            Rating = 0.0,
                            RatingCount = 0,
                            RiderOnlineOffline = 0,
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TotalCredits = 0m,
                            TotalEarnings = 0m,
                            TotalHours = 0.0,
                            TotalKms = 0.0,
                            TripsCount = 0
                        },
                        new
                        {
                            Id = 13,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 754, DateTimeKind.Unspecified).AddTicks(1180),
                            DeliveryStatus = 0,
                            EmailAddress = "rider13@gmail.com",
                            FirstName = "rider 13",
                            GUID = "71A8C0EC-2007-4E1A-A666-2D9AE917AFBF13",
                            IsAccountConfirmed = true,
                            Latitude = 10.312573,
                            LimitAmount = 0m,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (123.919889 10.312573)"),
                            Longitude = 123.919889,
                            MobileNumber = "639198286613",
                            Password = "G30l0g!cH@$H2048$Iv2+u0Fn70iLUsSb33lJJfUNWgnYu1wYKiTwFRKLS36YBQzrJ1GYnQOa",
                            Rating = 0.0,
                            RatingCount = 0,
                            RiderOnlineOffline = 0,
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TotalCredits = 0m,
                            TotalEarnings = 0m,
                            TotalHours = 0.0,
                            TotalKms = 0.0,
                            TripsCount = 0
                        },
                        new
                        {
                            Id = 14,
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 754, DateTimeKind.Unspecified).AddTicks(1200),
                            DeliveryStatus = 0,
                            EmailAddress = "rider14@gmail.com",
                            FirstName = "rider 14",
                            GUID = "71A8C0EC-2007-4E1A-A666-2D9AE917AFBF14",
                            IsAccountConfirmed = true,
                            Latitude = 10.312063999999999,
                            LimitAmount = 0m,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (123.91514 10.312064)"),
                            Longitude = 123.91513999999999,
                            MobileNumber = "639198286614",
                            Password = "G30l0g!cH@$H2048$Iv2+u0Fn70iLUsSb33lJJfUNWgnYu1wYKiTwFRKLS36YBQzrJ1GYnQOa",
                            Rating = 0.0,
                            RatingCount = 0,
                            RiderOnlineOffline = 0,
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TotalCredits = 0m,
                            TotalEarnings = 0m,
                            TotalHours = 0.0,
                            TotalKms = 0.0,
                            TripsCount = 0
                        });
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.RiderActivityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("activity")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RiderActivities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 754, DateTimeKind.Unspecified).AddTicks(5820),
                            GUID = "f2496e98-c6d7-493b-91d6-45803bbd00b0",
                            Status = "ACCEPTED",
                            activity = "ORDER ID:YR-89731210"
                        },
                        new
                        {
                            Id = 2,
                            ActivityDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 754, DateTimeKind.Unspecified).AddTicks(6510),
                            GUID = "42881e0d-5937-42c1-af0a-9c88b5ae9046",
                            Status = "STOPPED",
                            activity = "Last Moving Time 00:04:04"
                        },
                        new
                        {
                            Id = 3,
                            ActivityDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 754, DateTimeKind.Unspecified).AddTicks(6540),
                            GUID = "d7722661-b9c9-46f9-b4cb-aa3cdda127e6",
                            Status = "START MOVING",
                            activity = "Last Stoppage Time 00:06:04"
                        },
                        new
                        {
                            Id = 4,
                            ActivityDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2022, 3, 9, 21, 34, 12, 754, DateTimeKind.Unspecified).AddTicks(6550),
                            GUID = "b89f21b9-113a-41b8-bf59-d48ba7c524a1",
                            Status = "STOPPED",
                            activity = "Last Moving Time 00:07:04"
                        });
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.RiderDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("RiderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RiderId");

                    b.ToTable("RiderDevices");
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.UserLocationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserLocationLogs");
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.WalletEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("AccountManagement.FrameWork.Models.MerchantUserRestrictionEntity", b =>
                {
                    b.HasBaseType("AccountManagement.FrameWork.Models.MerchantUserTypeEntity");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("MerchantUserRestrictionEntity");
                });

            modelBuilder.Entity("AccountManagement.FrameWork.Models.ConsumerFavorites", b =>
                {
                    b.HasOne("AccountManagement.Framework.Models.ConsumerAccountEntity", null)
                        .WithMany("Favorites")
                        .HasForeignKey("ConsumerAccountEntityId");
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.CategoryEntity", b =>
                {
                    b.HasOne("AccountManagement.Framework.Models.CategoryEntity", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.ConsumerAddressBookEntity", b =>
                {
                    b.HasOne("AccountManagement.Framework.Models.ConsumerAccountEntity", "Consumer")
                        .WithMany("Addresses")
                        .HasForeignKey("ConsumerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.MerchantAccountEntity", b =>
                {
                    b.HasOne("AccountManagement.Framework.Models.MerchantStoreEntity", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.MerchantCategoryEntity", b =>
                {
                    b.HasOne("AccountManagement.Framework.Models.CategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("AccountManagement.Framework.Models.MerchantStoreEntity", "MerchantStore")
                        .WithMany("Categories")
                        .HasForeignKey("MerchantStoreId");
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.MerchantStoreEntity", b =>
                {
                    b.HasOne("AccountManagement.Framework.Models.MerchantStoreEntity", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.PersonProfile", b =>
                {
                    b.HasOne("AccountManagement.Framework.Models.RiderAccountEntity", "Rider")
                        .WithOne("profile")
                        .HasForeignKey("AccountManagement.Framework.Models.PersonProfile", "RiderId");
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.PersonWorkExperience", b =>
                {
                    b.HasOne("AccountManagement.Framework.Models.PersonProfile", "profile")
                        .WithMany("Experiences")
                        .HasForeignKey("profileId");
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.RiderAccountEntity", b =>
                {
                    b.HasOne("AccountManagement.Framework.Models.WalletEntity", "DefaultWallet")
                        .WithMany()
                        .HasForeignKey("DefaultWalletId");
                });

            modelBuilder.Entity("AccountManagement.Framework.Models.RiderDevice", b =>
                {
                    b.HasOne("AccountManagement.Framework.Models.RiderAccountEntity", "Rider")
                        .WithMany()
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
